/**************************************************************************
  Bu örnek kod Lezzetli Robot Tarifleri projesi olan LRT-Shock için
  Ömer Faruk Uçar tarafından yazılmıştır.

  Gönül rahatlığı ile kullanabilir, geliştirebilir ve isterseniz tekrar
  topluluk ile paylaşabilirsiniz :)

  Bu arduino kodunda Adafruit tarafından geliştirilen ve açık kaynak paylaşılan
  "Adafruit_GFX" ve "Adafruit_SSD1306" kütüphaneleri kullanılmıştır.
  Kendilerinden satın alma yaparak onlara destek vermeyi düşünebilirsiniz.
  https://www.adafruit.com/

                                ****DİKKAT!****
  Kullanim riski kendi sorumluluğunuzdadır.15 yas alti, 50 yaş üstü, herhangi sağlık
  sorunu olan kişiler, elektronik konusunda amatör olanlar, asla KULLANMAMALIDIR!!

  Versiyon 1.0.0
 **************************************************************************/

//******Arduino tarafında kullanılan pinler ve çarpam süresi tanımlaması*******
#define BUTTON 3
#define RELAY 2
#define SENSOR A0
#define STRIKE_TIME 50 //(ms)

//**********************Kütüphane tanımlamaları********************************
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//**********************Oled Ekren Tanımlamaları*******************************
#define SCREEN_WIDTH 128 // OLED ekran piksel cinsinden genişlik
#define SCREEN_HEIGHT 64 // OLED ekran piksel cinsinden yükseklik
#define OLED_RESET 4
#define LOGO_HEIGHT   64  //proje logosu yükseklik
#define LOGO_WIDTH    128 //proje logosu yükseklik
static const unsigned char PROGMEM logo_bmp[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x7E, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x60, 0x07, 0xFC, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x60, 0x07, 0xFC, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x07, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x07, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x07, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x07, 0xFC, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x07, 0xFC, 0x0C, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x70, 0x0C, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x38, 0x0C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x3C, 0x0C, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00,
  0x00, 0x00, 0x60, 0x06, 0x1C, 0x0C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xC6, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xC6, 0x04, 0x0C, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1F, 0xF3, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x7E, 0x63, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE3, 0x31, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x07, 0xB1, 0xB8, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x0E, 0x19, 0xFF, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x1F, 0x1F, 0xFF, 0xF0, 0x00,
  0x0F, 0xE1, 0x81, 0x83, 0xF8, 0x1F, 0xC1, 0x81, 0x00, 0xF8, 0x00, 0x39, 0x8F, 0xFF, 0xFE, 0x00,
  0x1F, 0xF1, 0x81, 0x87, 0xFC, 0x3F, 0xE1, 0x83, 0x80, 0xF0, 0x00, 0x70, 0xFF, 0xFF, 0xFF, 0x80,
  0x38, 0x11, 0x81, 0x8E, 0x0E, 0x70, 0x71, 0x87, 0x01, 0xC0, 0x00, 0xE0, 0x7F, 0xFF, 0xFF, 0xE0,
  0x38, 0x01, 0x81, 0x8C, 0x06, 0x60, 0x31, 0x8E, 0x03, 0x80, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xF0,
  0x38, 0x01, 0x81, 0x8C, 0x06, 0x60, 0x31, 0x9C, 0x07, 0x80, 0x01, 0x83, 0xFF, 0xFF, 0xFF, 0xF8,
  0x1E, 0x01, 0x81, 0x8C, 0x06, 0x60, 0x01, 0xB8, 0x07, 0x00, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFC,
  0x1F, 0x01, 0xFF, 0x8C, 0x06, 0x60, 0x01, 0xF0, 0x0E, 0x00, 0x02, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE,
  0x07, 0xC1, 0xFF, 0x8C, 0x06, 0x60, 0x01, 0xF8, 0x0E, 0x00, 0x06, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
  0x01, 0xE1, 0x81, 0x8C, 0x06, 0x60, 0x01, 0xD8, 0x0E, 0x00, 0x04, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x71, 0x81, 0x8C, 0x06, 0x60, 0x01, 0xDC, 0x0E, 0x00, 0x08, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x31, 0x81, 0x8C, 0x06, 0x60, 0x01, 0x8E, 0x0E, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x31, 0x81, 0x8C, 0x06, 0x60, 0x21, 0x86, 0x0E, 0x00, 0x60, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0x10, 0x71, 0x81, 0x8E, 0x0E, 0x70, 0x71, 0x87, 0x0F, 0x01, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x3F, 0xE1, 0x81, 0x87, 0xFC, 0x3F, 0xE1, 0x83, 0x87, 0xFF, 0xC0, 0xFF, 0xFE, 0x7F, 0xF3, 0xFF,
  0x0F, 0xC1, 0x81, 0x83, 0xF8, 0x1F, 0xE1, 0x81, 0x03, 0xFF, 0x00, 0xFF, 0xFF, 0x3F, 0xF9, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xBF, 0xFD, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0xC0, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x01, 0xC0, 0x63, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0xC0, 0xE7, 0x80, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0xE0, 0xCF, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0xE0, 0xC5, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xE7,
  0x00, 0x00, 0x00, 0x61, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x67, 0xFF, 0xFC, 0x07, 0xFF, 0xFE, 0x03,
  0x00, 0x00, 0x00, 0x71, 0x81, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xBF, 0xFC, 0x00, 0x3F, 0xC0, 0x1B,
  0x00, 0x00, 0x00, 0x71, 0x81, 0x80, 0x00, 0x00, 0x00, 0x3F, 0x0F, 0xF9, 0xE0, 0x00, 0x00, 0x79,
  0x00, 0x00, 0x00, 0x33, 0x81, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x0F, 0xF9, 0xFF, 0x00, 0x0F, 0xF9,
  0x00, 0x00, 0x00, 0x3B, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x3F, 0xFF, 0xFF, 0xC1,
  0x00, 0x00, 0x00, 0x3B, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x03, 0xFF, 0xFC, 0x03,
  0x00, 0x00, 0x00, 0x1F, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x1F,
  0x00, 0x00, 0x00, 0x1E, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x01, 0xFF,
  0x00, 0x00, 0x00, 0x1E, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x7F, 0xFF,
  0x00, 0x00, 0x00, 0x0E, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};


//*********I2C üzerinden bağlanan ekran için tanımlama (SDA, SCL pins)*****************
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


//************************Projede kullanılan değişkenler***************************
float Vout = 0.00;
float Vin = 0.00;
float R1 = 10000.00; // resistance of R1 (10K)
float R2 = 2000.00; // resistance of R2 (2K)
int val = 0;
const byte numChars = 32;
char receivedChars[numChars];
boolean newData = false;
boolean newSeparation = false;
int newValue = 100;
int oldValue = 100;

void setup()
{
  Serial.begin(9600); // seri haberleşme başlat

  //************************ Pin Mod Atamaları ***************************
  pinMode(RELAY, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);
  pinMode(SENSOR, INPUT);

  //************************ Ekranı I2C Adresi ile Başlat ***************************
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    for (;;); // Don't proceed, loop forever
  }

  // Ekran buffer temizle
  display.clearDisplay();
  display.display();
  delay(2000);


  // display.display() buffer değişiklik yapıldıktan sonra ekrana değişikliklerin
  // yansıtılması için çağırılması gerekir.
  while (1)
  {
    logo_drawbitmap();
    delay(1000);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.println(" BASLAMAK ");
    display.println("   iCiN   ");
    display.println("  BUTONA  ");
    display.println(" BASINIZ! ");
    display.display();
    delay(2000);
    if (digitalRead(BUTTON) == 0)
    {
      while (digitalRead(BUTTON) == 0);
      break;
    }
  }
  while (1)
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);             // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    display.println("");
    display.println("  DiKKAT  ");
    display.println("");
    display.display();
    delay(1000);

    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE);        // Draw white text
    display.setCursor(0, 0);            // Start at top-left corner
    display.println("Kullanim riski kendi");
    display.println("sorumlulugunuzdadir.");
    display.println("15 yas alti, 50 yas");
    display.println("ustu, herhangi saglik");
    display.println("sorunu olan kisiler,");
    display.println("elektronik konusunda ");
    display.println("amator olanlar, asla ");
    display.println("  KULLANMAMALIDIR!!");

    display.display();
    delay(5000);
    if (digitalRead(BUTTON) == 0)
    {
      while (digitalRead(BUTTON) == 0);
      break;
    }
  }
}

void loop()
{
  //******************* Buton ile hızlı şok kontrol *****************
  if (digitalRead(BUTTON) == 0)
  {
    digitalWrite(RELAY, 1);
    delay(STRIKE_TIME);
    digitalWrite(RELAY, 0);
    while (digitalRead(BUTTON) == 0);
  }
  else
    digitalWrite(RELAY, 0);

  //******************* Ekrana çarpılacak olan voltaj seviyesini yazdıran kısım *****************
  val = analogRead(A0);//reads the analog input
  Vout = (val * 5.00) / 1024.00; // formula for calculating voltage out i.e. V+, here 5.00
  Vin = Vout / (R2 / (R1 + R2)); // formula for calculating voltage in i.e. GND
  if (Vin < 0.09) //şartlandırma
  {
    Vin = 0.00; 
  }
  Vin = Vin * 30;
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(20, 25);
  display.println(Vin);
  display.display();
  delay(100);
  display.clearDisplay();

 //****** Oyundan gelen yeni verilerin işlendiği fonksiyonlar **********
  recvDataWithEndMarker();
  showNewData();


}
void recvDataWithEndMarker()
{
  static byte ndx = 0;
  char endMarker = '*';
  char rc;

  while (Serial.available() > 0 && newData == false)
  {
    rc = Serial.read();
    if (rc != endMarker) {
      receivedChars[ndx] = rc;
      ndx++;
      if (ndx >= numChars) {
        ndx = numChars - 1;
      }
    }
    else {
      receivedChars[ndx] = '\0';
      ndx = 0;
      newData = true;
    }
  }
}
void showNewData()
{
  if (newData == true) {

    newValue = atoi(receivedChars);
    newData = false;
    if (newValue == 100)
      oldValue = 100;
    if (((oldValue - newValue ) > 10))
    {
      digitalWrite(RELAY, 1);
      delay(STRIKE_TIME);
      digitalWrite(RELAY, 0);
      oldValue = newValue;
    }
  }
}
void logo_drawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}
